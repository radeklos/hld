buildscript {
    ext {
        springBootVersion = '1.3.0.RELEASE'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "http://repo.spring.io/milestone"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('se.transmode.gradle:gradle-docker:1.2')
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'docker'

group = 'radeklos'

jar {
    baseName = 'api'
    version = '0.0.1-SNAPSHOT'
}

repositories {
    mavenCentral()
    maven {
        url 'http://repo.spring.io/milestone'
    }
}

dependencies {
    // code
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.security:spring-security-web:4.0.3.RELEASE")

    // data
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("postgresql:postgresql:9.0-801.jdbc4")
    compile("org.codehaus.jackson:jackson-mapper-asl:1.9.13")
    compile("org.modelmapper:modelmapper:0.7.5")

    // rx
    compile("io.jmnarloch:rxjava-spring-boot-starter:1.0.0")

    // tests
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("junit:junit")
    testCompile("com.jayway.jsonpath:json-path-assert:0.8.1")
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.7'
}

task container(type: Docker, dependsOn: build) {
    applicationName = jar.baseName
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy {
            from jar
            into stageDir
        }
    }
}

test {
    testLogging {
        testLogging {
            events "passed", "skipped", "failed", "standardError"
        }
        exceptionFormat = 'full'
    }
}
